#Kolmogorov forward equation 
# Function to define the drift and diffusion coefficients
d <- function(x, t) {
  # Example drift (replace with your specific function)
  return(x)
}

b <- function(x, t) {
  # Example diffusion coefficient (replace with your specific function)
  return(1)  # Constant diffusion
}

# Function to implement the finite difference scheme
fd_solve <- function(x_grid, dt, dx, initial_condition) {
  n_steps <- length(dt)
  n_grid <- length(x_grid)
  
  # Initialize probability density at each grid point and time step
  P <- matrix(0, nrow = n_grid, ncol = n_steps)
  P[ , 1] <- initial_condition(x_grid)  # Set initial condition
  
  # Boundary conditions (replace with your specific conditions)
  P[1, ] <- 0  # Reflective boundary at x_min
  P[n_grid, ] <- 0  # Reflective boundary at x_max
  
  # Finite difference scheme
  for (i in 2:n_steps) {
    for (j in 2:(n_grid - 1)) {
      dP_dt <- -(d(x_grid[j], dt[i-1]) * (P[j, i-1] - P[j-1, i-1]) / dx + 
                0.5 * b(x_grid[j], dt[i-1])^2 * (P[j+1, i-1] - 2*P[j, i-1] + P[j-1, i-1]) / dx^2)
      P[j, i] <- P[j, i-1] + dP_dt * dt[i-1]
    }
  }
  
  return(P)
}

# Example usage (replace with your specific problem setup)
x_min <- 0
x_max <- 10
n_grid <- 100
dx <- (x_max - x_min) / (n_grid - 1)
x_grid <- seq(from = x_min, to = x_max, by = dx)

dt <- 0.1  # Time step
n_steps <- 10  # Number of time steps

# Define initial condition (replace with your specific function)
initial_condition <- function(x) {
  if (x >= 5 && x <= 7) {
    return(1)
  } else {
    return(0)
  }
}

# Solve the FKE
P <- fd_solve(x_grid, dt, dx, initial_condition)
