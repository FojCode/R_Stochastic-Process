#Kolmogorov forward equation 
# Function to define the drift and diffusion coefficients
d <- function(x, t) {
  # Example drift (replace with your specific function)
  return(x)
}

b <- function(x, t) {
  # Example diffusion coefficient (replace with your specific function)
  return(1)  # Constant diffusion
}

# Function to implement the finite difference scheme
fd_solve <- function(x_grid, dt, dx, initial_condition) {
  n_steps <- length(dt)
  n_grid <- length(x_grid)
  
  # Initialize probability density at each grid point and time step
  P <- matrix(0, nrow = n_grid, ncol = n_steps)
  P[ , 1] <- initial_condition(x_grid)  # Set initial condition
  
  # Boundary conditions (replace with your specific conditions)
  P[1, ] <- 0  # Reflective boundary at x_min
  P[n_grid, ] <- 0  # Reflective boundary at x_max
  
  # Finite difference scheme
  for (i in 2:n_steps) {
    for (j in 2:(n_grid - 1)) {
      dP_dt <- -(d(x_grid[j], dt[i-1]) * (P[j, i-1] - P[j-1, i-1]) / dx + 
                0.5 * b(x_grid[j], dt[i-1])^2 * (P[j+1, i-1] - 2*P[j, i-1] + P[j-1, i-1]) / dx^2)
      P[j, i] <- P[j, i-1] + dP_dt * dt[i-1]
    }
  }
  
  return(P)
}

# Example usage (replace with your specific problem setup)
x_min <- 0
x_max <- 10
n_grid <- 100
dx <- (x_max - x_min) / (n_grid - 1)
x_grid <- seq(from = x_min, to = x_max, by = dx)

dt <- 0.1  # Time step
n_steps <- 10  # Number of time steps

# Define initial condition (replace with your specific function)
initial_condition <- function(x) {
  if (x >= 5 && x <= 7) {
    return(1)
  } else {
    return(0)
  }
}

# Solve the FKE
P <- fd_solve(x_grid, dt, dx, initial_condition)
# Plot the solution at different time steps
library(ggplot2)

time_steps <- seq(1, n_steps, by = 5)
ggplot() +
  geom_line(aes(x = x_grid, y = P[, 1]), linetype = "dashed", color = "gray") +  # Initial condition
  geom_line(aes(x = x_grid, y = P[, time_steps[1]]), color = "blue") +
  geom_line(aes(x = x_grid, y = P[, time_steps[2]]), color = "green") +
  geom_line(aes(x = x_grid, y = P[, time_steps[3]]), color = "red") +
  labs(x = "x", y = "Probability Density", title = "Kolmogorov Forward Equation Solution")

# expected time to kit state k of a Markov jump process 

# Function to calculate expected reach time
expected_reach_time <- function(transition_matrix, initial_state, target_state) {
  n_states <- nrow(transition_matrix)
  
  # Initialize first passage times (time to reach target state for the first time)
  first_passage_time <- rep(Inf, n_states)
  first_passage_time[target_state] <- 0  # Reaching target state from itself takes 0 time
  
  # Iteration to calculate first passage times
  has_changed <- TRUE
  while (has_changed) {
    has_changed <- FALSE
    for (i in 1:n_states) {
      if (first_passage_time[i] == Inf) next
      for (j in 1:n_states) {
        if (j != target_state && transition_matrix[i, j] > 0) {
          new_time <- first_passage_time[i] + 1 / transition_matrix[i, j]
          if (new_time < first_passage_time[j]) {
            first_passage_time[j] <- new_time
            has_changed <- TRUE
          }
        }
      }
    }
  }
  
  # Check if target state is reachable from initial state
  if (first_passage_time[initial_state] == Inf) {
    return(NA)  # Target state not reachable
  }
  
  return(first_passage_time[initial_state])
}

# Example usage
transition_matrix <- matrix(c(0.4, 0.3, 0.3, 0.2, 0.5, 0.3, 0.1, 0.7, 0.2), nrow = 3, byrow = TRUE)
initial_state <- 1
target_state <- 3

expected_time <- expected_reach_time(transition_matrix, initial_state, target_state)

if (!is.na(expected_time)) {
  cat("Expected time to reach state", target_state, "from state", initial_state, ":", expected_time)
} else {
  cat("State", target_state, "is not reachable from state", initial_state)
}

# verifying if a Brownian motion is a martingale 

# Function to simulate Brownian motion path
brownian_motion <- function(n_steps, sigma) {
  # Generate standard normal random variables
  dW <- rnorm(n_steps, mean = 0, sd = sqrt(1/n_steps))
  
  # Simulate Brownian motion path with drift (set to 0 for standard BM)
  W <- cumsum(sigma * dW)
  return(W)
}

# Function to calculate expected value at future time step
expected_value <- function(W, t, future_step) {
  n <- length(W)
  if (future_step > n) {
    stop("Future step exceeds path length")
  }
  return(mean(W[1:(n - future_step)]))
}

# Simulation parameters
n_steps <- 1000
sigma <- 0.2

# Simulate Brownian motion path
W <- brownian_motion(n_steps, sigma)

# Check martingale property at different future time steps
future_steps <- c(10, 50, 100)
for (step in future_steps) {
  E_t <- expected_value(W, step = step)
  W_future <- W[step + 1]
  cat("Future step:", step, ", E[W_t] ~=", E_t, ", W_(t+1)=", W_future, "\n")
}

# maximum value of a Brownian motion 

Function to calculate probability using reflection principle
reflection_probability <- function(sigma, t, threshold) {
  dnorm <- function(x) {  # Define normal probability density function (optional)
    return(exp(-x^2 / 2) / sqrt(2 * pi))
  }
  
  # Reflection principle: P(M(t) <= threshold) = 1 - 2 * P(B(t) >= threshold)
  return(1 - 2 * pnorm(-threshold / sigma, mean = 0, sd = sqrt(t)))
}

# Example usage
sigma <- 1
t <- 2
threshold <- 0.5

probability <- reflection_probability(sigma, t, threshold)

cat("Probability (M(t) <=", threshold, "):", probability)

# hitting times of a Brownian motion 
# Function to simulate Brownian motion hitting times
brownian_hitting_time <- function(n_steps, sigma, barrier) {
  # Generate standard normal random variables
  dW <- rnorm(n_steps, mean = 0, sd = sqrt(1/n_steps))
  
  # Simulate Brownian motion path with drift (set to 0 for standard BM)
  W <- cumsum(sigma * dW)
  
  # Check for hitting time (crossing the barrier)
  hitting_time <- Inf
  for (i in 1:n_steps) {
    if ((W[i] >= barrier & sign(W[i-1]) < 0) | (W[i] <= barrier & sign(W[i-1]) > 0)) {
      hitting_time <- i
      break
    }
  }

# Simulation parameters
n_steps <- 1000
sigma <- 0.2
barrier <- 0.5

# Simulate hitting time
hitting_time <- brownian_hitting_time(n_steps, sigma, barrier)

if (hitting_time == Inf) {
  cat("Brownian motion did not hit the barrier within", n_steps, "steps.")
} else {
  cat("Hitting time:", hitting_time)
}

# Function to simulate Ornstein-Uhlenbeck process
ornstein_uhlenbeck <- function(mu, theta, sigma, dt, T, initial_state) {
  """
  This function simulates the Ornstein-Uhlenbeck process using the Euler-Maruyama method.

  Args:
      mu: The mean reversion level of the process.
      theta: The rate at which the process reverts to the mean.
      sigma: The volatility of the process.
      dt: The time step for simulation.
      T: The total simulation time.
      initial_state: The initial state of the process.

  Returns:
      A numeric vector representing the simulated OU process path.
  """
  n_steps <- int(T / dt) + 1  # Number of steps (including initial state)
  process_path <- rep(NA, n_steps)
  process_path[1] <- initial_state

# Simulate using Euler-Maruyama method
  for (i in 2:n_steps) {
    drift <- theta * (mu - process_path[i-1]) * dt
    diffusion <- sigma * rnorm(1, mean = 0, sd = sqrt(dt))
    process_path[i] <- process_path[i-1] + drift + diffusion
  }

  return(process_path)
}

# Example usage
mu <- 0.5
theta <- 1.0
sigma <- 0.2
dt <- 0.01
T <- 10.0
initial_state <- 1.0

process_path <- ornstein_uhlenbeck(mu, theta, sigma, dt, T, initial_state)

# Plot the simulated path (using ggplot2)
library(ggplot2)

t <- seq(0, T, by = dt)
ggplot(data.frame(t, process_path), aes(x = t, y = process_path)) +
  geom_line(color = "blue") +
  labs(title = "Simulated Ornstein-Uhlenbeck Process",
       x = "Time",
       y = "Process Value") +
  theme_bw()

#Monte Carlo simulation - box Muller formulae 

box_muller <- function(u1, u2) {
  """
  This function generates two independent standard normal variables using the Box-Muller transform.

  Args:
      u1: A random number uniformly distributed between 0 and 1.
      u2: Another random number uniformly distributed between 0 and 1 (independent of u1).

  Returns:
      A numeric vector containing two independent standard normal variables (z1, z2).
  """
  z1 <- sqrt(-2 * log(u1)) * cos(2 * pi * u2)
  z2 <- sqrt(-2 * log(u1)) * sin(2 * pi * u2)
  return(c(z1, z2))
}

# Example usage
# Generate two independent random numbers between 0 and 1
u1 <- runif(1)
u2 <- runif(1)

# Generate two independent standard normal variables
z1_z2 <- box_muller(u1, u2)

cat("Standard normal variable 1:", z1_z2[1])
cat("\nStandard normal variable 2:", z1_z2[2])


